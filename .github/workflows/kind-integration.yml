name: KinD DSPO/DSP Integration Tests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - go.mod
      - go.sum
      - controllers/**
      - api/**
      - config/**
      - tests/**
      - .github/resources/**
    types:
      - opened
      - reopened
      - closed
      - synchronize

concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  IMAGE_REPO_DSPO: data-science-pipelines-operator
  DSPA_NAMESPACE: test-dspa
  DSPA_EXTERNAL_NAMESPACE: dspa-ext
  MINIO_NAMESPACE: test-minio
  MARIADB_NAMESPACE: test-mariadb
  PYPISERVER_NAMESPACE: test-pypiserver
  DSPA_NAME: test-dspa
  DSPA_EXTERNAL_NAME: dspa-ext
  DSPA_DEPLOY_WAIT_TIMEOUT: 300
  INTEGRATION_TESTS_DIR: ${{ github.workspace }}/tests
  DSPA_PATH: ${{ github.workspace }}/tests/resources/dspa-lite.yaml
  DSPA_EXTERNAL_PATH: ${{ github.workspace }}/tests/resources/dspa-external-lite.yaml
jobs:
  dspo-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: '1.20.x'
        id: go

      - name: Setup and start KinD cluster
        uses: ./.github/actions/kind

      # TODO: Consolidate testing CRDS (2 locations)
      - name: Apply OCP CRDs
        env:
          RESOURCES_DIR: ${{ github.workspace }}/.github/resources
          CONFIG_DIR: ${{ github.workspace }}/config
        run: |
          kubectl apply -f ${{ env.RESOURCES_DIR }}/crds
          kubectl apply -f ${{ env.CONFIG_DIR }}/crd/external/route.openshift.io_routes.yaml

      - name: Build image
        env:
          DSPO_IMAGE: ${{env.REGISTRY_ADDRESS}}/data-science-pipelines-operator
        run: |
          make podman-build -e IMG="${DSPO_IMAGE}"

      - name: Create opendatahub namespace
        run: |
          kubectl create namespace opendatahub

      - name: Deploy Argo Lite
        working-directory: ${{ github.workspace }}/.github/resources/argo-lite
        run: |
          kustomize build . | kubectl apply -f -

      - name: Deploy DSPO
        env:
          DSPO_IMAGE: ${{env.REGISTRY_ADDRESS}}/data-science-pipelines-operator
        run: |
          make podman-push -e IMG="${DSPO_IMAGE}"
          make deploy-kind -e IMG="${DSPO_IMAGE}"

      - name: Create Minio Namespace
        run: |
          kubectl create namespace ${{ env.MINIO_NAMESPACE }}

      - name: Deploy Minio
        working-directory: ${{ github.workspace }}/.github/resources/minio
        run: |
          kustomize build . |  oc -n ${{ env.MINIO_NAMESPACE }} apply -f -

      - name: Create MariaDB Namespace
        run: |
          kubectl create namespace ${{ env.MARIADB_NAMESPACE }}

      - name: Deploy MariaDB
        working-directory: ${{ github.workspace }}/.github/resources/mariadb
        run: |
          kustomize build . |  oc -n ${{ env.MARIADB_NAMESPACE }} apply -f -

      - name: Create Pypiserver Namespace
        run: |
          kubectl create namespace ${{ env.PYPISERVER_NAMESPACE }}

      - name: Generate Self-Signed cert
        working-directory: ${{ github.workspace }}/.github/resources/pypiserver
        run: |
          sh generate-deploy-certs.sh

      - name: Create Self-Signed cert
        working-directory: ${{ github.workspace }}/.github/resources/pypiserver/certs
        run: |
          cat domain.crt rootCA.crt > server.crt
          kubectl create secret generic nginx-certs --from-file=server.crt=server.crt --from-file=private.key=domain.key -n ${{ env.PYPISERVER_NAMESPACE }}

      - name: Deploy pypi-server
        working-directory: ${{ github.workspace }}/.github/resources/pypiserver/base
        run: |
          kustomize build . | oc -n ${{ env.PYPISERVER_NAMESPACE }} apply -f -

      - name: Wait for Dependencies (DSPO, Minio, Mariadb)
        run: |
          kubectl wait -n opendatahub --timeout=60s --for=condition=Available=true deployment data-science-pipelines-operator-controller-manager
          kubectl wait -n ${{ env.MARIADB_NAMESPACE }} --timeout=60s --for=condition=Available=true deployment mariadb
          kubectl wait -n ${{ env.MINIO_NAMESPACE }} --timeout=60s --for=condition=Available=true deployment minio
          kubectl wait -n ${{ env.PYPISERVER_NAMESPACE }} --timeout=60s --for=condition=Available=true deployment pypi-server

      - name: Upload Python Packages to pypi-server
        working-directory: ${{ github.workspace }}/.github/resources/pypiserver
        run: |
          sh package_upload.sh

      - name: Create DSPA Namespace
        run: |
          kubectl create namespace ${{ env.DSPA_NAMESPACE }}

      - name: Create Namespace for DSPA with External connections
        run: |
          kubectl create namespace ${{ env.DSPA_EXTERNAL_NAMESPACE }}

      - name: Apply MariaDB and Minio Secrets and Configmaps in the External Namespace
        working-directory: ${{ github.workspace }}/.github/resources/external-pre-reqs
        run: |
          kustomize build . |  oc -n ${{ env.DSPA_EXTERNAL_NAMESPACE }} apply -f -

      - name: Apply PIP Server rootCA ConfigMap
        env:
          RESOURCES_DIR: ${{ github.workspace }}/.github/resources/pypiserver/certs
        run: |
          kubectl create configmap nginx-tls-config --from-file=rootCA.crt=$RESOURCES_DIR/rootCA.crt -n ${{ env.DSPA_NAMESPACE }}

      - name: Apply MariaDB and Minio Secrets and Configmaps in the External Namespace
        working-directory: ${{ github.workspace }}/.github/resources/external-pre-reqs
        run: |
          kustomize build . |  oc -n ${{ env.DSPA_EXTERNAL_NAMESPACE }} apply -f -

      - name: Run tests
        working-directory: ${{ github.workspace }}
        env:
          NAMESPACE: ${{ env.DSPA_NAMESPACE }}
          DSPA_NAME: ${{ env.DSPA_NAME }}
          DSPA_PATH: ${{ env.DSPA_PATH }}
        run: |
            make integrationtest K8SAPISERVERHOST=$(oc whoami --show-server) DSPANAMESPACE=${NAMESPACE} DSPAPATH=${DSPA_PATH}

      - name: Check DSPO Logs
        if: always()
        run: |
          dspo_pod=$(kubectl get pods -n opendatahub | grep 'data-science-pipelines-operator' | awk '{print $1}')
          kubectl logs -n opendatahub $dspo_pod | tail -n 100
          
      - name: Print CA Bundle Volume Mount Path
        if: always()
        run: |
          POD_NAME=$(kubectl get pods -n test-dspa -l app=ds-pipeline-test-dspa -o jsonpath="{.items[0].metadata.name}")
          VOLUME_NAME="ca-bundle"
          MOUNT_PATH=$(kubectl get pod ${POD_NAME} -n test-dspa -o jsonpath="{.spec.containers[*].volumeMounts[?(@.name=='${VOLUME_NAME}')].mountPath}")
          VOLUME_DETAILS=$(kubectl get pod ${POD_NAME} -n test-dspa -o jsonpath="{.spec.volumes[?(@.name=='${VOLUME_NAME}')]}")
          echo "The details of the ${VOLUME_NAME} volume are: ${VOLUME_DETAILS}"
          echo "The CA bundle volume mount path is: $MOUNT_PATH"

      - name: Print CA Bundle
        if: always()
        run: |
          kubectl get configmaps -n test-dspa
          kubectl describe configmap dsp-trusted-ca-test-dspa -n test-dspa

      - name: Check pipelineserver Logs
        if: always()
        run: |
          # Get the list of pods with Error status
          error_pods=$(kubectl get pods -n test-dspa -o json | jq -r '.items[] | select(.metadata.name | startswith("hello-pipeline")) | select(.status.containerStatuses[]?.state.terminated.reason == "Error") | .metadata.name')

          # Print the list of pods
          echo "Pods with Error status:"
          echo "$error_pods"

          # Check logs for each pod
          for pod in $error_pods; do
          echo "Checking logs for pod: $pod"
          kubectl logs -n test-dspa $pod | tail -n 100
          done

      - name: Run tests for DSPA with External Connections
        working-directory: ${{ github.workspace }}
        env:
          NAMESPACE: ${{ env.DSPA_EXTERNAL_NAMESPACE }}
          DSPA_NAME: ${{ env.DSPA_EXTERNAL_NAME }}
          DSPA_EXTERNAL_PATH: ${{ env.DSPA_EXTERNAL_PATH }}
        run: |
            make integrationtest K8SAPISERVERHOST=$(oc whoami --show-server) DSPANAMESPACE=${NAMESPACE} DSPAPATH=${DSPA_EXTERNAL_PATH}

      - name: Clean up
        run: |
          make undeploy-kind
